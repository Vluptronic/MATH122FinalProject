from keras.datasets import boston_housing
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np

(x_train, y_train), (x_test, y_test) = boston_housing.load_data()

'''
(i)
''' 
ridge_reg_model = Ridge(alpha = 1.0)
ridge_reg_model.fit(x_train, y_train)

y_test_pred = ridge_reg_model.predict(x_test)
m_sq_e = mean_squared_error(y_test, y_test_pred)

print("Mean Squared Error:", m_sq_e)

'''
(ii)
'''
kmeans = KMeans(n_clusters = 3)
training_clusters = kmeans.fit_predict(x_train)
training_centroids = kmeans.cluster_centers_

plt.figure()
colors = ["red", "blue", "green"]
for cluster in range(3):
    cluster_points = x_train[training_clusters == cluster]
    plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label = f"Cluster {cluster + 1}", color = colors[cluster])
plt.title("K-Means CLustering on the Training Data")
plt.legend()
plt.show()

'''
(iii)
'''
testing_clusters = kmeans.predict(x_test)
models = {}
cluster_m_sq_e = []

for cluster in range(3):
    cluster_i = (training_clusters == cluster)
    x_training_cluster = x_train[cluster_i]
    y_training_cluster = y_train[cluster_i]
    
    ridge_reg = Ridge(alpha = 1.0)
    ridge_reg.fit(x_training_cluster, y_training_cluster)
    models[cluster] = ridge_reg

    test_cluster_i = (testing_clusters == cluster)
    x_testing_cluster = x_test[test_cluster_i]
    y_testing_cluster = y_test[test_cluster_i]
    
    y_testing_pred = ridge_reg.predict(x_testing_cluster)
    
    c_m_sq_e = mean_squared_error(y_testing_cluster, y_testing_pred)
    cluster_m_sq_e.append(c_m_sq_e)
    
total_m_sq_e = np.mean(cluster_m_sq_e)
print("Total Mean Squared Error:", total_m_sq_e)
